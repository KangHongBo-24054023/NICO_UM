import numpy
import cv2
from _nicoemotionrecognition_internal import modelLoader, modelDictionary, imageProcessingUtil, GUIController
import sys
import tensorflow as tf
from nicovision.VideoDevice import VideoDevice
from nicoface.FaceExpression import faceExpression
import logging

class EmotionRecognition:
    def __init__(self, device='', faceDetectionDelta = 10):
        """
        Initialises the EmotionRecognition

        :param device: Target video capture unit
        :type device: str
        :param faceDetectionDelta: Number of frames until face detection is refreshed
        :type faceDetectionDelta: int
        """
        self._finalImageSize = (1024,768) # Size of the final image generated by the demo
        self._categoricalInitialPosition = 260 # Initial position for adding the categorical graph in the final image
        self._faceSize = (64,64) # Input size for both models: categorical and dimensional
        self._deviceName = device
        self._device = None
        self._categoricalRecognition = None
        self._dimensionalRecognition = None
        self._running = False
        self._facialExpression = faceExpression("/dev/ttyACM0")

        self._modelCategorical = modelLoader.modelLoader(modelDictionary.CategoricaModel)
        self._modelDimensional = modelLoader.modelLoader(modelDictionary.DimensionalModel)
        self._graph = tf.get_default_graph()


        self._imageProcessing = imageProcessingUtil.imageProcessingUtil(faceDetectionDelta)

        self._GUIController = GUIController.GUIController()


    def start(self, showGUI=True, mirrorEmotion=False):
        """
        Starts the emotion recognition

        :param showGUI: Whether or not the GUI should be displayed
        :type showGUI: bool
        :param mirrorEmotion: Whether or not the robot should mirror the detected emotion
        :type mirrorEmotion: bool
        """
        if self._running:
            logging.warning('Trying to start emotion recognition while already running')
            return
        self._device = VideoDevice.fromDevice(self._deviceName)
        self._device.addCallback(self._callback)
        self._device.open()
        self._showGUI = showGUI
        self._running = True
        self._mirrorEmotion = mirrorEmotion

    def stop(self):
        """
        Stops the emotion recognition
        """
        if not self._running:
            logging.warning("Trying to stop emotion recognition while it's not running")
            return
        self._device.close()
        self._device = None
        self._categoricalRecognition = None
        self._dimensionalRecognition = None
        cv2.destroyAllWindows()
        self._running = False

    def getDimensionalData(self):
        """
        Returns the dimensional data of the currently detected face (or None if there is none)

        :return: Arousal and Valence score (or None if no face detected)
        :rtype: dict
        """
        if not self._running:
            logging.warning('Dimensional data requested while emotion recognition not running')
            return None
        if self._dimensionalRecognition==None:
            logging.info("No face detected - Dimensional data will be 'None'")
            return None
        return dict(zip(self._modelDimensional.modelDictionary.classsesOrder, map(lambda x: float(float(x[0][0])*100), self._dimensionalRecognition)))

    def getCategoricalData(self):
        """
        Returns the categorical data of the currently detected face (or None if there is none)

        :return: Neutral, Happiness, Surprise, Sadness, Anger, Disgust, Fear and Contempt percentages (or None if no face detected)
        :rtype: dict
        """
        if not self._running:
            logging.warning('Categorical data requested while emotion recognition not running')
            return None
        if self._dimensionalRecognition==None:
            logging.info("No face detected - Categorical data will be 'None'")
            return None
        return dict(zip(self._modelCategorical.modelDictionary.classsesOrder, self._categoricalRecognition[0]))

    def getHighestMatchingEmotion(self):
        """
        Returns the name of the highest matching emotion for the currently detected face (or None if there is none)

        :return: Neutral, Happiness, Surprise, Sadness, Anger, Disgust, Fear or Contempt (or None if no face detected)
        :rtype: String
        """
        if self._categoricalRecognition is not None:
            max_index = numpy.argmax(self._categoricalRecognition[0])
            print max_index
            print type(max_index)
            max_classname = self._modelCategorical.modelDictionary.classsesOrder[max_index]
            print max_classname
            print type(max_classname)
            return self._modelCategorical.modelDictionary.classsesOrder[numpy.argmax(self._categoricalRecognition[0])].lower()
        return None


    def _callback(self, rval, frame):
        if frame is not None:
            facePoints, face = self._imageProcessing.detectFace(frame)

            if self._showGUI:
                image = numpy.zeros((self._finalImageSize[1], self._finalImageSize[0], 3), numpy.uint8)
                image[0:480, 0:640] = frame
                frame = image



            if not len(face) == 0:
                face = self._imageProcessing.preProcess(face, self._faceSize)
                with self._graph.as_default():
                    self._categoricalRecognition = self._modelCategorical.classify(face)
                    self._dimensionalRecognition = self._modelDimensional.classify(face)

                if self._mirrorEmotion:
                    self._facialExpression.sendFaceExpression(self.getHighestMatchingEmotion())

                if self._showGUI:
                    frame = self._GUIController.createDetectedFacGUI(frame,facePoints,self._modelCategorical.modelDictionary, self._categoricalRecognition)
                    frame = self._GUIController.createDimensionalEmotionGUI(self._dimensionalRecognition, frame, self._categoricalRecognition, self._modelCategorical.modelDictionary)
                    frame = self._GUIController.createCategoricalEmotionGUI(self._categoricalRecognition,frame,self._modelCategorical.modelDictionary, initialPosition=self._categoricalInitialPosition)
            else:
                self._categoricalRecognition = None
                self._dimensionalRecognition = None

            if self._showGUI:
                # Display the resulting frame
                cv2.imshow('Visual Emotion Recognition',frame)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    #break
                    return
